AWSTemplateFormatVersion: '2010-09-09'
Description: network layer

Parameters:
  VPCCidr:
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnetCidr0:
    Type: String
    Default: "10.0.0.0/24"
  PrivateSubnetCidr0:
    Type: String
    Default: "10.0.1.0/24"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
  InternetGateWay:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateWay'
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateWay
  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr0
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet0'
  # PublicSubnetに紐づけるRouteTable
  PublicSubnetRouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetRouteTable0'
  # インターネットゲートウェイに紐付けるRoute
  PublicSubnetRoute:
      Type: AWS::EC2::Route
      DependsOn:
        - VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicSubnetRouteTable0
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateWay
  # RouteTableをSubnetに関連付ける
  PublicSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet0
        RouteTableId: !Ref PublicSubnetRouteTable0
  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidr0
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet0'
  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyFormat: pem
      KeyName: EC2KeyPair
      KeyType: rsa
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2KeyPair'
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-EC2SecurityGroup'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          # TODO 自分のIPアドレスを指定する
          CidrIp: 0.0.0.0/0
        # http
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # https
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  # 同じセキュリティグループのEC2からのアクセスを許可する
  EC2SecurityGroupCircle:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref EC2SecurityGroup
  EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-012261b9035f8f938
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp3
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref PublicSubnet0
      KeyName: !Ref EC2KeyPair
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2'
  EC2ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2ElasticIP'
