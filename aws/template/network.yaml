AWSTemplateFormatVersion: '2010-09-09'
Description: network layer

Parameters:
  HostedZoneId:
    Description: ホステッドゾーンID
    Type: String
    Default: 'Z04738022S7T0S229HHTY'
  DomainName:
    Description: ホステッドゾーン名
    Type: String
    Default: 'nifu.link'
  SubDomainName:
    Description: ホステッドゾーン名
    Type: String
    Default: 'www.nifu.link'
  VPCCidr:
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnetCidr0:
    Type: String
    Default: "10.0.0.0/24"
  PublicSubnetCidr1:
    Type: String
    Default: "10.0.10.0/24"
  PrivateSubnetCidr0:
    Type: String
    Default: "10.0.1.0/24"
  EnableNatGateway:
    Description: Enable NAT Gateway.
    Type: String
    Default: false
    AllowedValues: [true, false]

Conditions:
  EnableNatGateway:
    !Equals [true, !Ref EnableNatGateway]

Resources:
  # ---------------------------------------------------------------------------- #
  #                                    Common                                    #
  # ---------------------------------------------------------------------------- #
  ServerKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyFormat: pem
      KeyName: ServerKeyPair
      KeyType: rsa
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ServerKeyPair'
  # ---------------------------------------------------------------------------- #
  #                                      VPC                                     #
  # ---------------------------------------------------------------------------- #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
  InternetGateWay:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateWay'
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateWay
  # ---------------------------------------------------------------------------- #
  #                                      DNS                                     #
  # ---------------------------------------------------------------------------- #
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '*.${DomainName}'
      DomainValidationOptions:
        - HostedZoneId: !Ref HostedZoneId
          DomainName: !Sub '${SubDomainName}'
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Certificate'
  DNSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${SubDomainName}'
      Type: A
      AliasTarget:
          HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
          DNSName: !GetAtt ALB.DNSName
  # ---------------------------------------------------------------------------- #
  #                                      ALB                                     #
  # ---------------------------------------------------------------------------- #
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-ALB'
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
      SecurityGroups:
        - !Ref WEBServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ALB'
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-ALBTargetGroup'
      VpcId: !Ref VPC
      TargetType: instance
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200
      Targets:
        - Id: !Ref WEBServer0
        - Id: !Ref WEBServer1
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ALBTargetGroup'
  # ---------------------------------------------------------------------------- #
  #                             PublicSubnetCommon                               #
  # ---------------------------------------------------------------------------- #
  # PublicSubnetに紐づけるRouteTable
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetRouteTable'
  # インターネットゲートウェイに紐付けるRoute
  PublicSubnetRoute:
      Type: AWS::EC2::Route
      DependsOn:
        - VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicSubnetRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateWay
  # WebServerのセキュリティグループ
  WEBServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-WEBServerSecurityGroup'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          # TODO 自分のIPアドレスを指定する
          CidrIp: 0.0.0.0/0
        # http
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # https
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  # 同じセキュリティグループのEC2からのアクセスを許可する
  WEBServerSecurityGroupCircle:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WEBServerSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref WEBServerSecurityGroup
  # ---------------------------------------------------------------------------- #
  #                                 PublicSubnet0                                #
  # ---------------------------------------------------------------------------- #
  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr0
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet0'
  # RouteTableをSubnetに関連付ける
  PublicSubnetRouteTableAssociation0:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet0
        RouteTableId: !Ref PublicSubnetRouteTable
  WEBServer0:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0826d73b8b9aba5c1
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp3
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: 0
          GroupSet:
            - !Ref WEBServerSecurityGroup
          SubnetId: !Ref PublicSubnet0
      KeyName: !Ref ServerKeyPair
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WEBServer0'
  # ==== NatGateway0 =====
  NatGateway0:
    Type: AWS::EC2::NatGateway
    Condition: EnableNatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP0.AllocationId
      SubnetId: !Ref PublicSubnet0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NatGateway0'
  NatGatewayEIP0:
    Type: AWS::EC2::EIP
    Condition: EnableNatGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NatGatewayEIP0'
  # ---------------------------------------------------------------------------- #
  #                                 PublicSubnet1                                #
  # ---------------------------------------------------------------------------- #
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr1
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet1'
  # RouteTableをSubnetに関連付ける
  PublicSubnetRouteTableAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicSubnetRouteTable
  # ==== WEBServer =====
  WEBServer1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0826d73b8b9aba5c1
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp3
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: 0
          GroupSet:
            - !Ref WEBServerSecurityGroup
          SubnetId: !Ref PublicSubnet1
      KeyName: !Ref ServerKeyPair
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WEBServer'
  # ---------------------------------------------------------------------------- #
  #                                PrivateSubnet0                                #
  # ---------------------------------------------------------------------------- #
  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidr0
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet0'
  # PrivateSubnetに紐づけるRouteTable
  PrivateSubnetRouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetRouteTable0'
  # インターネットゲートウェイに紐付けるRoute
  PrivateSubnetRoute:
      Type: AWS::EC2::Route
      Condition: EnableNatGateway
      Properties:
        RouteTableId: !Ref PrivateSubnetRouteTable0
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway0
  # RouteTableをSubnetに関連付ける
  PrivateSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet0
        RouteTableId: !Ref PrivateSubnetRouteTable0
  DBServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-DBServerSecurityGroup'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref WEBServerSecurityGroup # WEBServerからのsshを許可する
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !Ref WEBServerSecurityGroup # WEBServerからのpingを許可する
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref WEBServerSecurityGroup # WEBServerからの全ての通信を許可する
  DBServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-012261b9035f8f938
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp3
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          PrivateIpAddress: 10.0.1.10
          DeviceIndex: 0
          GroupSet:
            - !Ref DBServerSecurityGroup
          SubnetId: !Ref PrivateSubnet0
      KeyName: !Ref ServerKeyPair
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-DBServer'
